@page "/efactura-oauth"
@using RomaniaEFacturaLibrary.Services
@using RomaniaEFacturaLibrary.Services.Authentication
@using RomaniaEFacturaLibrary.Models.Authentication
@inject IAuthenticationService AuthService
@inject IEFacturaClient EFacturaClient
@inject IJSRuntime JSRuntime
@inject ILogger<EFacturaOAuth> Logger
@inject NavigationManager Navigation

<PageTitle>EFactura OAuth Authentication</PageTitle>

<h3>EFactura OAuth2 Authentication</h3>

@if (currentStep == AuthStep.NotStarted)
{
    <div class="alert alert-info">
        <h5>?? ANAF EFactura Authentication</h5>
        <p>To access your invoices, you need to authenticate with ANAF using your digital certificate.</p>
        <p><strong>What will happen:</strong></p>
        <ul>
            <li>You'll be redirected to ANAF login page</li>
            <li>Browser will prompt you to insert USB certificate device</li>
            <li>Select your certificate and confirm</li>
            <li>You'll be redirected back to download invoices</li>
        </ul>
        <button class="btn btn-primary btn-lg" @onclick="StartAuthentication">
            ?? Start Authentication
        </button>
    </div>
}

@if (currentStep == AuthStep.Redirecting)
{
    <div class="alert alert-warning">
        <div class="d-flex align-items-center">
            <div class="spinner-border me-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div>
                <h5>Redirecting to ANAF...</h5>
                <p class="mb-0">You will be redirected to ANAF login page where you can select your USB certificate.</p>
            </div>
        </div>
    </div>
}

@if (currentStep == AuthStep.ProcessingCallback)
{
    <div class="alert alert-success">
        <div class="d-flex align-items-center">
            <div class="spinner-border me-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div>
                <h5>Processing authentication...</h5>
                <p class="mb-0">Exchanging authorization code for access token...</p>
            </div>
        </div>
    </div>
}

@if (currentStep == AuthStep.Authenticated)
{
    <div class="alert alert-success">
        <h5>? Authentication Successful!</h5>
        <p>You are now authenticated with ANAF. Token expires: <strong>@tokenExpiry?.ToString("yyyy-MM-dd HH:mm:ss")</strong></p>
        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
            <button class="btn btn-primary" @onclick="LoadInvoices">?? Load Invoices</button>
            <button class="btn btn-outline-secondary" @onclick="RefreshToken">?? Refresh Token</button>
        </div>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        <h5>? Authentication Error</h5>
        <p><strong>@errorMessage</strong></p>
        @if (errorDetails != null)
        {
            <details>
                <summary>Technical Details</summary>
                <pre>@errorDetails</pre>
            </details>
        }
        <button class="btn btn-outline-primary" @onclick="StartOver">Try Again</button>
    </div>
}

@if (isLoadingInvoices)
{
    <div class="card">
        <div class="card-body">
            <div class="d-flex align-items-center">
                <div class="spinner-border me-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div>
                    <h5>Loading Invoices...</h5>
                    <p class="mb-0">Fetching your invoices from ANAF SPV...</p>
                </div>
            </div>
        </div>
    </div>
}

@if (invoices?.Count > 0)
{
    <div class="card mt-3">
        <div class="card-header">
            <h5>?? Your Invoices (@invoices.Count found)</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Invoice Number</th>
                            <th>Date</th>
                            <th>Supplier</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var invoice in invoices)
                        {
                            <tr>
                                <td>@invoice.InvoiceNumber</td>
                                <td>@invoice.IssueDate?.ToString("yyyy-MM-dd")</td>
                                <td>@invoice.SupplierName</td>
                                <td>@invoice.TotalAmount?.ToString("C")</td>
                                <td>
                                    <span class="badge bg-@GetStatusColor(invoice.Status)">
                                        @invoice.Status
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" 
                                            @onclick="() => DownloadInvoice(invoice.InvoiceNumber)">
                                        ?? Download
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private enum AuthStep
    {
        NotStarted,
        Redirecting,
        ProcessingCallback,
        Authenticated
    }

    private AuthStep currentStep = AuthStep.NotStarted;
    private string? errorMessage;
    private string? errorDetails;
    private DateTime? tokenExpiry;
    private bool isLoadingInvoices = false;
    private List<InvoiceInfo>? invoices;

    private readonly string redirectUri = "https://localhost:7000/efactura-oauth"; // Update with your actual URL

    protected override async Task OnInitializedAsync()
    {
        // Check if we're returning from OAuth callback
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        if (query.ContainsKey("code"))
        {
            currentStep = AuthStep.ProcessingCallback;
            await ProcessOAuthCallback(query["code"], query.ContainsKey("state") ? query["state"] : "");
        }
    }

    private async Task StartAuthentication()
    {
        try
        {
            currentStep = AuthStep.Redirecting;
            errorMessage = null;
            StateHasChanged();

            // Generate authorization URL
            var authUrl = AuthService.GetAuthorizationUrl(redirectUri);
            
            Logger.LogInformation("Redirecting to authorization URL: {AuthUrl}", authUrl);
            
            // Redirect to ANAF OAuth page
            await Task.Delay(1000); // Give user time to see the message
            Navigation.NavigateTo(authUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting authentication");
            errorMessage = "Failed to start authentication process";
            errorDetails = ex.ToString();
            currentStep = AuthStep.NotStarted;
            StateHasChanged();
        }
    }

    private async Task ProcessOAuthCallback(string code, string state)
    {
        try
        {
            Logger.LogInformation("Processing OAuth callback with code: {Code}", code[..8] + "...");
            
            // Exchange authorization code for access token
            var tokenResponse = await AuthService.ExchangeCodeForTokenAsync(code, redirectUri);
            
            tokenExpiry = DateTime.UtcNow.AddSeconds(tokenResponse.ExpiresIn ?? 3600);
            currentStep = AuthStep.Authenticated;
            
            Logger.LogInformation("Authentication successful, token expires at {Expiry}", tokenExpiry);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing OAuth callback");
            errorMessage = "Failed to exchange authorization code for access token";
            errorDetails = ex.ToString();
            currentStep = AuthStep.NotStarted;
        }
        
        StateHasChanged();
    }

    private async Task RefreshToken()
    {
        try
        {
            errorMessage = null;
            
            // Get current token and refresh it
            await AuthService.GetAccessTokenAsync(); // This will auto-refresh if needed
            
            tokenExpiry = DateTime.UtcNow.AddSeconds(3600); // Update expiry estimate
            
            Logger.LogInformation("Token refreshed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing token");
            errorMessage = "Failed to refresh token";
            errorDetails = ex.ToString();
        }
        
        StateHasChanged();
    }

    private async Task LoadInvoices()
    {
        try
        {
            isLoadingInvoices = true;
            errorMessage = null;
            StateHasChanged();

            // Load invoices using the authenticated client
            var invoiceList = await EFacturaClient.GetInvoicesAsync();
            
            invoices = invoiceList.Select(inv => new InvoiceInfo
            {
                InvoiceNumber = inv.InvoiceNumber ?? "N/A",
                IssueDate = inv.IssueDate,
                SupplierName = inv.SupplierParty?.Name ?? "Unknown",
                TotalAmount = inv.LegalMonetaryTotal?.TaxInclusiveAmount?.Value,
                Status = "Active" // You'd get this from the actual invoice data
            }).ToList();

            Logger.LogInformation("Loaded {Count} invoices", invoices.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading invoices");
            errorMessage = "Failed to load invoices";
            errorDetails = ex.ToString();
        }
        finally
        {
            isLoadingInvoices = false;
            StateHasChanged();
        }
    }

    private async Task DownloadInvoice(string invoiceNumber)
    {
        try
        {
            var invoice = await EFacturaClient.DownloadInvoiceAsync(invoiceNumber);
            
            // Convert to downloadable format
            var xmlContent = System.Text.Encoding.UTF8.GetBytes(invoice.ToString() ?? "");
            var fileName = $"invoice_{invoiceNumber}.xml";
            
            // Trigger browser download
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(xmlContent));
            
            Logger.LogInformation("Downloaded invoice {InvoiceNumber}", invoiceNumber);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading invoice {InvoiceNumber}", invoiceNumber);
            errorMessage = $"Failed to download invoice {invoiceNumber}";
            errorDetails = ex.ToString();
            StateHasChanged();
        }
    }

    private void StartOver()
    {
        currentStep = AuthStep.NotStarted;
        errorMessage = null;
        errorDetails = null;
        tokenExpiry = null;
        invoices = null;
        StateHasChanged();
    }

    private static string GetStatusColor(string status) => status.ToLower() switch
    {
        "active" => "success",
        "pending" => "warning",
        "error" => "danger",
        _ => "secondary"
    };

    private class InvoiceInfo
    {
        public string InvoiceNumber { get; set; } = string.Empty;
        public DateTime? IssueDate { get; set; }
        public string SupplierName { get; set; } = string.Empty;
        public decimal? TotalAmount { get; set; }
        public string Status { get; set; } = string.Empty;
    }
}

<script>
    window.downloadFile = (filename, content) => {
        const element = document.createElement('a');
        element.setAttribute('href', 'data:application/xml;base64,' + content);
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    };
</script>