@page "/efactura-invoices"
@using RomaniaEFacturaLibrary.Services
@using RomaniaEFacturaLibrary.Services.Authentication
@using System.Security.Cryptography.X509Certificates
@inject IEFacturaClient EFacturaClient
@inject IAuthenticationService AuthService
@inject IJSRuntime JSRuntime
@inject ILogger<EFacturaInvoices> Logger

<PageTitle>EFactura Invoices</PageTitle>

<h3>EFactura Invoices Download</h3>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <p>@loadingMessage</p>
}

@if (availableCertificates?.Count > 1 && selectedCertificate == null)
{
    <div class="alert alert-info">
        <h5>Multiple certificates found. Please select one:</h5>
        <div class="list-group">
            @foreach (var cert in availableCertificates)
            {
                <button class="list-group-item list-group-item-action" 
                        @onclick="() => SelectCertificate(cert)">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">@cert.GetNameInfo(X509NameType.SimpleName, false)</h6>
                        <small>@cert.NotAfter.ToString("yyyy-MM-dd")</small>
                    </div>
                    <p class="mb-1">Issuer: @cert.Issuer</p>
                    <small>Thumbprint: @cert.Thumbprint[..8]...</small>
                </button>
            }
        </div>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
        @if (errorMessage.Contains("No certificate available"))
        {
            <br><br>
            <strong>Solutions:</strong>
            <ul>
                <li>Insert your USB certificate device</li>
                <li>Ensure the certificate is properly installed</li>
                <li>Check that the certificate is valid and not expired</li>
            </ul>
        }
    </div>
}

@if (invoices?.Count > 0)
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Invoice Number</th>
                    <th>Date</th>
                    <th>Supplier</th>
                    <th>Amount</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var invoice in invoices)
                {
                    <tr>
                        <td>@invoice.InvoiceNumber</td>
                        <td>@invoice.IssueDate?.ToString("yyyy-MM-dd")</td>
                        <td>@invoice.SupplierParty?.Name</td>
                        <td>@invoice.TotalAmount?.ToString("C")</td>
                        <td>
                            <button class="btn btn-sm btn-primary" 
                                    @onclick="() => DownloadInvoice(invoice.InvoiceNumber)">
                                Download
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private bool isLoading = false;
    private string? loadingMessage;
    private string? errorMessage;
    private List<X509Certificate2>? availableCertificates;
    private X509Certificate2? selectedCertificate;
    private List<InvoiceInfo>? invoices;

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoicesAsync();
    }

    private async Task LoadInvoicesAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            loadingMessage = "Checking for USB certificates...";
            StateHasChanged();

            // Get available certificates (will find USB certificates automatically)
            availableCertificates = AuthService.GetAvailableCertificates();
            
            if (availableCertificates.Count == 0)
            {
                errorMessage = "No certificate available. Please insert your USB certificate device and refresh the page.";
                return;
            }
            
            if (availableCertificates.Count == 1)
            {
                // Single certificate - use it automatically
                selectedCertificate = availableCertificates[0];
                AuthService.SetCertificate(selectedCertificate);
                await DownloadInvoicesAsync();
            }
            else
            {
                // Multiple certificates - user needs to select
                loadingMessage = "Multiple certificates found. Please select one.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during initialization");
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectCertificate(X509Certificate2 certificate)
    {
        selectedCertificate = certificate;
        AuthService.SetCertificate(certificate);
        await DownloadInvoicesAsync();
    }

    private async Task DownloadInvoicesAsync()
    {
        try
        {
            isLoading = true;
            loadingMessage = "Authenticating with ANAF...";
            StateHasChanged();

            // This will automatically use the selected USB certificate
            var invoiceList = await EFacturaClient.GetInvoicesAsync();
            
            invoices = invoiceList.Select(inv => new InvoiceInfo
            {
                InvoiceNumber = inv.InvoiceNumber,
                IssueDate = inv.IssueDate,
                SupplierParty = inv.SupplierParty,
                TotalAmount = inv.LegalMonetaryTotal?.TaxInclusiveAmount?.Value
            }).ToList();

            loadingMessage = $"Found {invoices.Count} invoices.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading invoices");
            errorMessage = $"Error downloading invoices: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task DownloadInvoice(string invoiceNumber)
    {
        try
        {
            var invoice = await EFacturaClient.DownloadInvoiceAsync(invoiceNumber);
            
            // Convert to downloadable format
            var xmlContent = System.Text.Encoding.UTF8.GetBytes(invoice.ToString());
            var fileName = $"invoice_{invoiceNumber}.xml";
            
            // Trigger browser download
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(xmlContent));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading invoice {InvoiceNumber}", invoiceNumber);
            errorMessage = $"Error downloading invoice: {ex.Message}";
            StateHasChanged();
        }
    }

    private class InvoiceInfo
    {
        public string InvoiceNumber { get; set; } = string.Empty;
        public DateTime? IssueDate { get; set; }
        public object? SupplierParty { get; set; }
        public decimal? TotalAmount { get; set; }
    }
}

<script>
    window.downloadFile = (filename, content) => {
        const element = document.createElement('a');
        element.setAttribute('href', 'data:application/xml;base64,' + content);
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    };
</script>